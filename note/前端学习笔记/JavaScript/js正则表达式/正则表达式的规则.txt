正则的使用：下面的规则任意组合。
正则的特性：会尽可能匹配最长的字符串。


\转义：
(注：如果想用规则里面的字符本身，那么前面就要加\，e.g. \\d匹配的字符就是\d)

	\d	[0-9]		数字
	\w	[a-z0-9_]	数字、字母、下划线
	\s			所有空白字符

	\D	[^0-9]		除了数字
	\W	[^a-z0-9_]	除了数字、字母、下划线
	\S			除了所有空白字符

	.			任意字符（最好不要用）



{}量词：
		{n,m}	最少n次，最多m次
		{n,}	最少n次，最多不限
		{n}	正好n次
	+	{1,}	若干
	?	{0,1}	可有可无
	*	{0,}	几个都行（最好不用）



[]元字符：

	任意字符：[abc]	匹配a或匹配b或匹配c的字符段
		e.g.	a[xyz]pc，那么匹配的字符就是axpc，aypc，azpc

	范围：[0-9]	在0-9之间的数字

	排除：[^0-9]	除了数字以外的字符


组合：
	[a-z0-9A-Z]	



可以与正则配合使用的方法：

	str.search(reg)		返回匹配字符出现的位置
	str.match(reg)		返回所有匹配的字符串数组
	str.replace(reg, s)	将匹配的字符段替换为s，返回替换后的字符串
	reg.test(str)		验证str是否符合reg规则，返回布尔值



/a|b|c/		匹配a或匹配b或匹配c的字符段


^	行首（字符串开头）
$	行尾（字符串结尾）


i	ignore		忽略大小写
g	global		全局匹配，找到所有满足条件的

